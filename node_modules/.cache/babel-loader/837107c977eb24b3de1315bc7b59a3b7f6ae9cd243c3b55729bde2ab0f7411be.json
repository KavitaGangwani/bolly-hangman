{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web development\\\\Projects\\\\bolly_hangman\\\\src\\\\ContextProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { myContext } from './Context';\nimport Movie from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContextProvider(props) {\n  _s();\n  // STATE 1 to render play button\n  const [isButton, setIsButton] = useState(false);\n  //  STATE 2 to render game popup\n  const [gamePopup, setGamePopup] = useState(false);\n  // STATE 3 to render hint popup\n  const [hintPopup, setHintPopup] = useState(false);\n\n  // STATES for movie data\n  const [movieTitle, setMovietitle] = useState([]);\n  const [movieUnmasked, setMovieUnmasked] = useState([]);\n  const [movieDesc, setMoviedesc] = useState('');\n\n  // STATES for corrects and fails\n  const [corrects, setCorrects] = useState([]);\n  const [fails, setFails] = useState([]);\n\n  // FUNCTION 1 for rendering popup and getting a random movie\n  const playGame = () => {\n    setGamePopup(true);\n    setIsButton(false);\n    getRandom();\n  };\n\n  //  FUNCTION 2 for getting data of a random movie \n  const getRandom = () => {\n    let randomMoviedata = Movie[Math.floor(Math.random() * Movie.length)];\n\n    // console.log(randomMoviedata)\n    let moviename = randomMoviedata.title;\n    let movie = Array.from(moviename.toUpperCase());\n    setMovieUnmasked(movie);\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    // console.log(movie)\n\n    let array = [];\n    movie.map((v, i) => {\n      // console.log(v)\n\n      if (vowels.includes(v)) {\n        console.log(v, 'vowels');\n        array[i] = v;\n      } else if (v === ' ') {\n        array[i] = ' ';\n      } else {\n        array[i] = '__';\n      }\n    });\n    setMovietitle(array);\n    setMoviedesc(randomMoviedata.description);\n  };\n\n  // FUNCTION 2 that runs on guess on click from keyboard\n  const onGuess = e => {\n    let letter = e.target.value;\n    if (movieUnmasked.includes(letter)) {\n      setCorrects([...corrects]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(myContext.Provider, {\n    value: {\n      playGame,\n      isButton,\n      setIsButton,\n      gamePopup,\n      hintPopup,\n      setHintPopup,\n      movieTitle,\n      movieDesc,\n      onGuess\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(ContextProvider, \"BGkS1gkwGivlEioRyrjipBYq51A=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","useState","myContext","Movie","jsxDEV","_jsxDEV","ContextProvider","props","_s","isButton","setIsButton","gamePopup","setGamePopup","hintPopup","setHintPopup","movieTitle","setMovietitle","movieUnmasked","setMovieUnmasked","movieDesc","setMoviedesc","corrects","setCorrects","fails","setFails","playGame","getRandom","randomMoviedata","Math","floor","random","length","moviename","title","movie","Array","from","toUpperCase","vowels","array","map","v","i","includes","console","log","description","onGuess","e","letter","target","value","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Web development/Projects/bolly_hangman/src/ContextProvider.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { myContext } from './Context'\r\nimport Movie from './data'\r\n\r\nfunction ContextProvider(props) {\r\n// STATE 1 to render play button\r\n const [isButton , setIsButton] = useState(false)\r\n//  STATE 2 to render game popup\r\n const [gamePopup,setGamePopup] = useState(false)\r\n// STATE 3 to render hint popup\r\nconst [ hintPopup , setHintPopup] = useState(false)\r\n\r\n// STATES for movie data\r\nconst [movieTitle,setMovietitle] =  useState([])\r\nconst [movieUnmasked,setMovieUnmasked] =  useState([])\r\nconst [movieDesc,setMoviedesc] =  useState('')\r\n\r\n// STATES for corrects and fails\r\nconst [corrects,setCorrects] = useState([])\r\nconst [fails,setFails] = useState([])\r\n\r\n \r\n// FUNCTION 1 for rendering popup and getting a random movie\r\n const playGame = ()=>{\r\n    setGamePopup(true)\r\n    setIsButton(false)\r\n    getRandom();\r\n    \r\n }\r\n\r\n//  FUNCTION 2 for getting data of a random movie \r\nconst getRandom = ()=>{\r\n    \r\n    let randomMoviedata =   Movie[Math.floor(Math.random()*Movie.length)]\r\n   \r\n    // console.log(randomMoviedata)\r\n    let moviename = randomMoviedata.title\r\n    let movie = Array.from(moviename.toUpperCase())\r\n    setMovieUnmasked(movie)\r\n    let vowels = ['A','E','I','O','U']\r\n    // console.log(movie)\r\n  \r\n    let array =[]\r\n     movie.map((v,i)=>{\r\n      // console.log(v)\r\n  \r\n      if(vowels.includes(v)){\r\n        console.log(v ,'vowels')\r\n        array[i] = v\r\n      }\r\n      else if(v === ' ' ){\r\n        array[i] = ' '\r\n         \r\n      }\r\n      else{\r\n        array[i] = '__'\r\n      }\r\n  \r\n    \r\n  \r\n    })\r\n    setMovietitle(array)\r\n    setMoviedesc(randomMoviedata.description)\r\n   \r\n  \r\n}   \r\n\r\n// FUNCTION 2 that runs on guess on click from keyboard\r\nconst onGuess = (e)=>{\r\n  let letter = e.target.value\r\n  if(movieUnmasked.includes(letter)){\r\n    setCorrects([...corrects])\r\n  }\r\n\r\n}\r\n  return (\r\n    <myContext.Provider value={{playGame,isButton,setIsButton,gamePopup,hintPopup,setHintPopup,movieTitle,movieDesc,onGuess}}>\r\n        {props.children}\r\n    </myContext.Provider>\r\n    \r\n  )\r\n}\r\n\r\nexport default ContextProvider"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}